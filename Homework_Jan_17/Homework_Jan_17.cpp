//1. Написать игру «Угадай число». Пользователь мысленно загадывает число от 0 до 1000, компьютер 
//отгадывает его за минимальное количество попыток.

//#include <iostream>
//#include <ctime>
//using namespace std;
//int main()
//{
//	srand(time(NULL));
//	int N = rand() %1000 + 1;
//	int M=500;
//	int H;
//	int L=500;
//	int i = 0;
//	cout << "Guess my number" << N << "\n";
//	do
//	{
//		i++;
//		if (M < N && i > 12)
//		{
//			M = M + 1;
//		}
//		else if (M > N && i > 12)
//		{
//			M = M - 1;
//		}
//		else if (M < N )
//		{
//			M = M + L;
//			L = L / 2;
//		}
//		else if (M > N)
//		{
//			M = M - L;
//			L = L / 2;
//		}
//	} while (M!=N);
//	if (i == 1)
//	{
//		cout << "Cheater(((";
//	}
//	else if (i <= 8)
//	{
//		cout << "Very lucky number " << N << " in " << i << " tries";
//	}
//	else if (i>1)
//	{
//		cout << "Just lucky number " << N << " in " << i << " tries";
//	}	
//}

//2. Показать номера и общее количество всех счастливых трамвайных билетов с шестизначными номерами.

//#include <iostream>
//using namespace std;
//int main()
//{
//	cout << "Enter 6 digits for number. Let's find out if it is lucky\n";
//	int ticket = 0;
//	int i = 0;
//	int e=0;
//	do
//	{
//		//cin >> ticket;
//		
//		int six = ticket / 100000 % 10;
//		int five = ticket / 10000 % 10;
//		int four = ticket / 1000 % 10;
//		int three = ticket / 100 % 10;
//		int two = ticket / 10 % 10;
//		int one = ticket % 10;
//		ticket += 1;
//		if ((six + five + four) == (three + two + one))
//		{
//			e++;
//			cout << e << " - " << six << five << four << three << two << one << "\n";
//		}
//	} while (ticket < 1000000);
//}

//3. Показать на экран все восьмизначные числа, цифры в которых не повторяются.
//Эти числа должны делиться на 12345 без остатка.Показать общее количество найденных чисел.

//#include <iostream>
//using namespace std;
//int main()
//{
//    int n = 10000000;
//    int e = 1;
//    do
//    {
//        if (n % 12345 == 0
//            && (n % 10 != n / 10 % 10 && n % 10 != n / 100 % 10 && n % 10 != n / 1000 % 10 && n % 10 != n / 10000 % 10 && n % 10 != n / 100000 % 10 && n % 10 != n / 1000000 % 10 && n % 10 != n / 10000000 % 10
//                && n / 10 % 10 != n % 10 && n / 10 % 10 != n / 100 % 10 && n / 10 % 10 != n / 1000 % 10 && n / 10 % 10 != n / 10000 % 10 && n / 10 % 10 != n / 100000 % 10 && n / 10 % 10 != n / 1000000 % 10 && n / 10 % 10 != n / 10000000 % 10
//                && n / 100 % 10 != n % 10 && n / 100 % 10 != n / 10 % 10 && n / 100 % 10 != n / 1000 % 10 && n / 100 % 10 != n / 10000 % 10 && n / 100 % 10 != n / 100000 % 10 && n / 100 % 10 != n / 1000000 % 10 && n / 100 % 10 != n / 10000000 % 10
//                && n / 1000 % 10 != n % 10 && n / 1000 % 10 != n / 10 % 10 && n / 1000 % 10 != n / 100 % 10 && n / 1000 % 10 != n / 10000 % 10 && n / 1000 % 10 != n / 100000 % 10 && n / 1000 % 10 != n / 1000000 % 10 && n / 1000 % 10 != n / 10000000 % 10
//                && n / 10000 % 10 != n % 10 && n / 10000 % 10 != n / 10 % 10 && n / 10000 % 10 != n / 100 % 10 && n / 10000 % 10 != n / 1000 % 10 && n / 10000 % 10 != n / 100000 % 10 && n / 10000 % 10 != n / 1000000 % 10 && n / 10000 % 10 != n / 10000000 % 10
//                && n / 100000 % 10 != n % 10 && n / 100000 % 10 != n / 10 % 10 && n / 100000 % 10 != n / 100 % 10 && n / 100000 % 10 != n / 1000 % 10 && n / 100000 % 10 != n / 10000 % 10 && n / 100000 % 10 != n / 1000000 % 10 && n / 100000 % 10 != n / 10000000 % 10
//                && n / 1000000 % 10 != n % 10 && n / 1000000 % 10 != n / 10 % 10 && n / 1000000 % 10 != n / 100 % 10 && n / 1000000 % 10 != n / 1000 % 10 && n / 1000000 % 10 != n / 10000 % 10 && n / 1000000 % 10 != n / 100000 % 10 && n / 1000000 % 10 != n / 10000000 % 10
//                && n / 10000000 % 10 != n % 10 && n / 10000000 % 10 != n / 10 % 10 && n / 10000000 % 10 != n / 100 % 10 && n / 10000000 % 10 != n / 1000 % 10 && n / 10000000 % 10 != n / 10000 % 10 && n / 10000000 % 10 != n / 100000 % 10 && n / 10000000 % 10 != n / 1000000 % 10))
//        {
//            cout << e << " - " << n << "\n";
//            e++;
//        }
//        n += 1;
//    } while (n < 99999999);
//
//    {
//        cout << "Not so much! \n";
//    }
//}

//4. Реализовать игровую программу «Однорукий бандит»(игровой автомат).
//В начале игры пользователю выдаётся 5000 кредитов. Случайным образом на барабанчиках выпадает три значения от 0 до 7.
//Призовые комбинации : 0 0 0, 1 1 1, 2 2 2, 3 3 3, 4 4 4, 5 Х Х, 5 5 Х, 5 5 5, 7 Х Х, 7 7 Х, 7 7 7 
//(на месте Х может быть любая цифра).Штрафная комбинация : 6 6 6. Все остальные комбинации нейтральные.
//В любом случае, за показ новой комбинации с игрового счёта пользователя снимается определённая фиксированная сумма денег.
//Необходимо назначить различные вознаграждения за выпадение призовых комбинаций.
//Комбинации можно показывать через MessageBoxA, например. Зациклить работу приложения. 
//Игра заканчивается поражением, если деньги закончились.Игра заканчивается победой, если выпадает джек - пот(7 7 7).

//#include <iostream>
//#include <ctime>
//using namespace std;
//int main()
//{
//	srand(time(NULL));
//	int c = 5000;//credits
//	int v = 0;//activate roll with number. aoutomatic with letter
//	int coin = 500;//cost of game
//	int roll=1;
//	cout << "TRY YOUR LUCK\n";
//	do
//	{
//		cin >> v;
//		int x = rand() % 8;
//		int y = rand() % 8;
//		int z = rand() % 8;
//		cout << x << " | " << y << " | " << z << "\n";
//		
//		c -= coin;
//		if (x == 7 && y == 7 && z == 7)
//		{
//			cout << "You won Jackpot!!!\n";
//			return 0;
//		}
//		else if ((x == 7 && y == 7 && z != 7) || (x == 7 && y != 7 && z == 7) || (x != 7 && y == 7 && z == 7))
//		{
//			c += 2000;
//			cout << "WON WON WON\n";
//		}
//		else if ((x == 7 && y != 7 && z != 7) || (x != 7 && y == 7 && z != 7) || (x != 7 && y != 7 && z == 7))
//		{
//			c += 1000;
//			cout << "WON WON WON\n";
//		}
//		else if (x == 6 && y == 6 && z != 7)
//		{
//			c -= 1000;
//			cout << "WON WON WON\n";
//		}
//		else if ((x == 5 && y == 5 && z != 5) || (x == 5 && y != 5 && z == 5) || (x != 5 && y == 5 && z == 5))
//		{
//			c += 1000;
//			cout << "WON WON WON\n";
//		}
//		else if ((x == 5 && y != 5 && z != 5) || (x != 5 && y == 5 && z != 5) || (x != 5 && y != 5 && z == 5))
//		{
//			c += 500;
//			cout << "WON WON WON\n";
//		}
//		else if (x == 4 && y == 4 && z == 4)
//		{
//			c += 400;
//			cout << "WON WON WON\n";
//		}
//		else if (x == 3 && y == 3 && z == 3)
//		{
//			c += 300;
//			cout << "WON WON WON\n";
//		}
//		else if (x == 2 && y == 2 && z == 2)
//		{
//			c += 200;
//			cout << "WON WON WON\n";
//		}
//		else if (x == 1 && y == 1 && z == 1)
//		{
//			c += 150;
//			cout << "WON WON WON\n";
//		}
//		else if (x == 0 && y == 0 && z == 0)
//		{
//			c += 100;
//			cout << "WON WON WON\n";
//		}
//		else
//		{
//			cout << "Next time. Luck around corner!\n";
//		}
//
//		cout << c << " credits\n";
//		roll++;
//	} while (c>coin);
//	cout << "Hungry cats are waiting at home. You lost in " << roll << " rolls";
//}

//5. Королю нужно убить дракона, но средства его казны – ограничены.
//Нужно создать программу, которая поможет рассчитать минимальное количество копейщиков, которое необходимо, 
//чтобы убить дракона.Данные очков здоровья и атаки дракона и одного копейщика вводятся с клавиатуры.
//Защиту, удачу, мораль, меткость и т.п.не учитывать.
//Копейщики наносят удар первыми(общий нанесённый урон – это сумма атак всех живых копейщиков).
//Если атака дракона превышает значение очков здоровья копейщика(например, у копейщика хп 10, а атака дракона - 15), 
//то копейщик погибает, а оставшийся урон действует на оставшихся в живых копейщиков.
//Например, жизнь дракона 500, атака 55, жизнь одного копейщика 10, атака 10, а количество копейщиков – 20 
//http:heroes.thelazy.net/wiki/List_of_creatures  
//Лог боя для данного примера должен выглядеть так:
//	Копейщики атакуют(урон 200) – у дракона осталось 300 очков здоровья.
//	Дракон атакует(урон 55) – осталось 15 копейщиков, один из которых ранен(осталось 5 очков здоровья).
//	Копейщики атакуют(урон 150) – у дракона осталось 150 очков здоровья.
//	Дракон атакует(урон 55) – осталось 9 копейщиков.
//	Копейщики атакуют(урон 90) – у дракона осталось 60 очков здоровья.
//	Дракон атакует(урон 55) – осталось 4 копейщика, один из которых ранен(осталось 5 жизней).
//	Копейщики атакуют(урон 40) – у дракона осталось 20 очков здоровья.
//	Дракон атакует и побеждает.

#include <iostream>
using namespace std;
int main()
{
	int DragonHP = 500;
	int DragonAtk = 55;
	int LancerHP = 10;
	int LancerAtk = 10;
	int Lancer = 20;
	int ArmyAtk = LancerAtk * Lancer;
	int ArmyHP = LancerHP * Lancer;
	int round = 0;
	do
	{
		cout << "Now Drogon has - " << DragonHP << "HP. Lancets deal damage " << ArmyAtk << ".\n";
		if (DragonHP > ArmyAtk)
		{
			DragonHP = DragonHP - ArmyAtk;
			cout << "Dragon has - " << DragonHP << "HP.\n";
		}
		else
		{
			cout << "Dragon DEFEAT! King Forever. Tactician!\n";
			return 0;
		}
		cout << "Dragon Attaks with damage of - " << DragonAtk << " !!!\n";
		if (ArmyHP <= DragonAtk)
		{
			cout << "King was greedy. All lancer are dead...\n";
		}
		else
		{
			ArmyHP -= DragonAtk;
			Lancer = ArmyHP / LancerHP;

			cout << Lancer + 1 << " Survived Lancers.\n";
		}
		if (ArmyHP % LancerHP != 0)
		{
			cout << "One injured lancer with " << ArmyHP % LancerHP << " HP\n";
			
			cout << ArmyAtk;
		}
		
		(ArmyAtk) = LancerHP * Lancer + ArmyHP % LancerHP;
	} while (DragonHP >= 0);
	cout << "King Forever. Tactician!\n";
}